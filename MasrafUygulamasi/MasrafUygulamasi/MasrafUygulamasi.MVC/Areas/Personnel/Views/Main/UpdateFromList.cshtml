@using MasrafUygulamasi.MVC.Areas.Personnel.ViewModels;
@model UpdateExpenseVM
<div class="card overflow-hidden border-0 shadow-lg my-5">
	<div class="card-body p-0">
		<form asp-action="UpdateFromList" method="post">
			<div class="row d-flex justify-content-center">
				<div class="col-6">
					<div class="form-group">
						<label asp-for="CurrencyType">Currency</label>
						<select class="form-control bg-white" asp-for="CurrencyType" asp-items="@Model.Currencies"></select>
					</div>
				</div>
				<div class="col-6">
					<div class="form-group">
						<label asp-for="TitleName">Title</label>
						<input type="text" maxlength="50" class="form-control" asp-for="TitleName" placeholder="Title" />
					</div>
					<input id="totalPrice" asp-for="TotalPrice" type="hidden" value="@Model.TotalPrice" />

					<input asp-for="ExpenseId" type="hidden" value="@Model.ExpenseId" />
				</div>
				<div class="col-12 mt-5">
					<table id="expenseItemsTable" class="table table-primary">
						<thead>
							<tr>
								<th scope="col">ExpenseType</th>
								<th scope="col">ExpenseDescription</th>
								<th scope="col">Price</th>
								<th scope="col">ExpenseDate</th>
							</tr>
						</thead>
						<tbody>

							@{
								for (int i = 0; i < Model.ExpenseItems.Count; i++)

								{
									<tr>

										<input type="hidden" class="form-control" asp-for="ExpenseItems[i].id" />

										<td>
											<select class="form-control bg-white" asp-for="ExpenseItems[i].ExpenseType">
												@foreach (var opt in Model.ExpenseTypes)
												{
													<option value="@opt">@opt</option>
												}

											</select>
										</td>
										<td>
											<input type="text" class="form-control" asp-for="ExpenseItems[i].ExpenseDescription" placeholder="Add some note" maxlength="50" />
										</td>
										<td>
											<input oninput="updateTotalPrice()" type="number" min="0" max="5000" step="0.01" required="required" class="form-control forDynamicPriceCal" asp-for="ExpenseItems[i].Price" placeholder="Max 5000" />
										</td>
										<td>
											<input type="date" class="form-control" asp-for="ExpenseItems[i].ExpenseDate" onclick="adjustDateInput(this)"/>

										</td>
									</tr>
								}
							}
						</tbody>
					</table>
					<div class="d-flex justify-content-end">
						<div>
							<label><strong>Total Cost:</strong></label>
							<span id="visibleTotalPrice">@Model.TotalPrice</span>
						</div>
					</div>
					<div asp-validation-summary=All class="text-danger">
					</div>
				</div>
			</div>
			<button type="submit" class="btn btn-primary">Submit</button>
		</form>
	</div>
</div>

@section Scripts{
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
	<script>
		function adjustDateInput(dateInput) {
			var today = new Date().toISOString().split('T')[0];
			dateInput.setAttribute("max", today);
		}
		function updateTotalPrice() {
			let calculate = 0;
			let writeToSpan = document.getElementById("visibleTotalPrice");
			let writeForInput = document.getElementById("totalPrice");
			const collection = document.getElementsByClassName("forDynamicPriceCal");
			for (let x of collection) {
				if (Number.parseFloat(x.value) && Number.parseFloat(x.value) > 0 && Number.parseFloat(x.value) < 5001) {
					calculate += parseFloat(x.value);

				}
				else if (Number.parseFloat(x.value) > 5000) {
					x.value = 5000;
					calculate += 5000;
				}
				else if (Number.parseFloat(x.value) < 0) {
					x.value = 0;
				}
				else {

				}
			}
			calculate = calculate.toFixed(2);
			writeToSpan.innerHTML = calculate;
			writeForInput.value = calculate;
		}

	</script>
}
